//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.8
//
// <auto-generated>
//
// Generated from file `echaCuentasV2.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package InvoiceAccounts;

public abstract class _serverProductsDisp extends Ice.ObjectImpl implements serverProducts
{
    private static final String[] _ids =
    {
        "::Ice::Object",
        "::InvoiceAccounts::serverProducts"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(_ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current current)
    {
        return java.util.Arrays.binarySearch(_ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return _ids;
    }

    public String[] ice_ids(Ice.Current current)
    {
        return _ids;
    }

    public String ice_id()
    {
        return _ids[1];
    }

    public String ice_id(Ice.Current current)
    {
        return _ids[1];
    }

    public static String ice_staticId()
    {
        return _ids[1];
    }

    public final String requestProduct(Product pc)
    {
        return requestProduct(pc, null);
    }

    public final void requestMenu(Ice.StringHolder menu)
    {
        requestMenu(menu, null);
    }

    public final String requestSuggestion()
    {
        return requestSuggestion(null);
    }

    public final int getNumProducts()
    {
        return getNumProducts(null);
    }

    public final Product getProduct(int num)
    {
        return getProduct(num, null);
    }

    public static boolean _iceD_requestProduct(serverProducts obj, IceInternal.Incoming inS, Ice.Current current)
        throws Ice.UserException
    {
        _iceCheckMode(Ice.OperationMode.Normal, current.mode);
        Ice.InputStream istr = inS.startReadParams();
        Product iceP_pc = null;
        iceP_pc = Product.ice_read(istr);
        inS.endReadParams();
        String ret = obj.requestProduct(iceP_pc, current);
        Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams();
        return true;
    }

    public static boolean _iceD_requestMenu(serverProducts obj, IceInternal.Incoming inS, Ice.Current current)
        throws Ice.UserException
    {
        _iceCheckMode(Ice.OperationMode.Normal, current.mode);
        inS.readEmptyParams();
        Ice.StringHolder iceP_menu = new Ice.StringHolder();
        obj.requestMenu(iceP_menu, current);
        Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(iceP_menu.value);
        inS.endWriteParams();
        return true;
    }

    public static boolean _iceD_requestSuggestion(serverProducts obj, IceInternal.Incoming inS, Ice.Current current)
        throws Ice.UserException
    {
        _iceCheckMode(Ice.OperationMode.Normal, current.mode);
        inS.readEmptyParams();
        String ret = obj.requestSuggestion(current);
        Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams();
        return true;
    }

    public static boolean _iceD_getNumProducts(serverProducts obj, IceInternal.Incoming inS, Ice.Current current)
        throws Ice.UserException
    {
        _iceCheckMode(Ice.OperationMode.Normal, current.mode);
        inS.readEmptyParams();
        int ret = obj.getNumProducts(current);
        Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams();
        return true;
    }

    public static boolean _iceD_getProduct(serverProducts obj, IceInternal.Incoming inS, Ice.Current current)
        throws Ice.UserException
    {
        _iceCheckMode(Ice.OperationMode.Normal, current.mode);
        Ice.InputStream istr = inS.startReadParams();
        int iceP_num;
        iceP_num = istr.readInt();
        inS.endReadParams();
        Product ret = obj.getProduct(iceP_num, current);
        Ice.OutputStream ostr = inS.startWriteParams();
        Product.ice_write(ostr, ret);
        inS.endWriteParams();
        return true;
    }

    private final static String[] _all =
    {
        "getNumProducts",
        "getProduct",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "requestMenu",
        "requestProduct",
        "requestSuggestion"
    };

    public boolean _iceDispatch(IceInternal.Incoming in, Ice.Current current)
        throws Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_all, current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_getNumProducts(this, in, current);
            }
            case 1:
            {
                return _iceD_getProduct(this, in, current);
            }
            case 2:
            {
                return _iceD_ice_id(this, in, current);
            }
            case 3:
            {
                return _iceD_ice_ids(this, in, current);
            }
            case 4:
            {
                return _iceD_ice_isA(this, in, current);
            }
            case 5:
            {
                return _iceD_ice_ping(this, in, current);
            }
            case 6:
            {
                return _iceD_requestMenu(this, in, current);
            }
            case 7:
            {
                return _iceD_requestProduct(this, in, current);
            }
            case 8:
            {
                return _iceD_requestSuggestion(this, in, current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }

    protected void _iceWriteImpl(Ice.OutputStream ostr_)
    {
        ostr_.startSlice(ice_staticId(), -1, true);
        ostr_.endSlice();
    }

    protected void _iceReadImpl(Ice.InputStream istr_)
    {
        istr_.startSlice();
        istr_.endSlice();
    }

    public static final long serialVersionUID = 0L;
}
