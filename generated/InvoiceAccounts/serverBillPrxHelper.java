//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.8
//
// <auto-generated>
//
// Generated from file `echaCuentasV2.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package InvoiceAccounts;

/**
 * Provides type-specific helper functions.
 **/
public final class serverBillPrxHelper extends Ice.ObjectPrxHelperBase implements serverBillPrx
{
    private static final String _addProduct_name = "addProduct";

    public void addProduct(Product p)
    {
        _iceI_addProduct(p, null, false);
    }

    public void addProduct(Product p, java.util.Map<String, String> context)
    {
        _iceI_addProduct(p, context, true);
    }

    private void _iceI_addProduct(Product iceP_p, java.util.Map<String, String> context, boolean explicitCtx)
    {
        end_addProduct(_iceI_begin_addProduct(iceP_p, context, explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_addProduct(Product p)
    {
        return _iceI_begin_addProduct(p, null, false, false, null);
    }

    public Ice.AsyncResult begin_addProduct(Product p, java.util.Map<String, String> context)
    {
        return _iceI_begin_addProduct(p, context, true, false, null);
    }

    public Ice.AsyncResult begin_addProduct(Product p, Ice.Callback cb)
    {
        return _iceI_begin_addProduct(p, null, false, false, cb);
    }

    public Ice.AsyncResult begin_addProduct(Product p, java.util.Map<String, String> context, Ice.Callback cb)
    {
        return _iceI_begin_addProduct(p, context, true, false, cb);
    }

    public Ice.AsyncResult begin_addProduct(Product p, Callback_serverBill_addProduct cb)
    {
        return _iceI_begin_addProduct(p, null, false, false, cb);
    }

    public Ice.AsyncResult begin_addProduct(Product p, java.util.Map<String, String> context, Callback_serverBill_addProduct cb)
    {
        return _iceI_begin_addProduct(p, context, true, false, cb);
    }

    public Ice.AsyncResult begin_addProduct(Product p,
                                            IceInternal.Functional_VoidCallback responseCb,
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_addProduct(p, null, false, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_addProduct(Product p,
                                            IceInternal.Functional_VoidCallback responseCb,
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                            IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_addProduct(p, null, false, false, responseCb, exceptionCb, sentCb);
    }

    public Ice.AsyncResult begin_addProduct(Product p,
                                            java.util.Map<String, String> context,
                                            IceInternal.Functional_VoidCallback responseCb,
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_addProduct(p, context, true, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_addProduct(Product p,
                                            java.util.Map<String, String> context,
                                            IceInternal.Functional_VoidCallback responseCb,
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                            IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_addProduct(p, context, true, false, responseCb, exceptionCb, sentCb);
    }

    private Ice.AsyncResult _iceI_begin_addProduct(Product iceP_p,
                                                   java.util.Map<String, String> context,
                                                   boolean explicitCtx,
                                                   boolean synchronous,
                                                   IceInternal.Functional_VoidCallback responseCb,
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                                   IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_addProduct(iceP_p,
                                      context,
                                      explicitCtx,
                                      synchronous,
                                      new IceInternal.Functional_OnewayCallback(responseCb, exceptionCb, sentCb));
    }

    private Ice.AsyncResult _iceI_begin_addProduct(Product iceP_p,
                                                   java.util.Map<String, String> context,
                                                   boolean explicitCtx,
                                                   boolean synchronous,
                                                   IceInternal.CallbackBase cb)
    {
        IceInternal.OutgoingAsync result = getOutgoingAsync(_addProduct_name, cb);
        try
        {
            result.prepare(_addProduct_name, Ice.OperationMode.Normal, context, explicitCtx, synchronous);
            Ice.OutputStream ostr = result.startWriteParams(Ice.FormatType.DefaultFormat);
            Product.ice_write(ostr, iceP_p);
            result.endWriteParams();
            result.invoke();
        }
        catch(Ice.Exception ex)
        {
            result.abort(ex);
        }
        return result;
    }

    public void end_addProduct(Ice.AsyncResult iresult)
    {
        _end(iresult, _addProduct_name);
    }

    private static final String _deleteProduct_name = "deleteProduct";

    public boolean deleteProduct(String name)
    {
        return _iceI_deleteProduct(name, null, false);
    }

    public boolean deleteProduct(String name, java.util.Map<String, String> context)
    {
        return _iceI_deleteProduct(name, context, true);
    }

    private boolean _iceI_deleteProduct(String iceP_name, java.util.Map<String, String> context, boolean explicitCtx)
    {
        _checkTwowayOnly(_deleteProduct_name);
        return end_deleteProduct(_iceI_begin_deleteProduct(iceP_name, context, explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_deleteProduct(String name)
    {
        return _iceI_begin_deleteProduct(name, null, false, false, null);
    }

    public Ice.AsyncResult begin_deleteProduct(String name, java.util.Map<String, String> context)
    {
        return _iceI_begin_deleteProduct(name, context, true, false, null);
    }

    public Ice.AsyncResult begin_deleteProduct(String name, Ice.Callback cb)
    {
        return _iceI_begin_deleteProduct(name, null, false, false, cb);
    }

    public Ice.AsyncResult begin_deleteProduct(String name, java.util.Map<String, String> context, Ice.Callback cb)
    {
        return _iceI_begin_deleteProduct(name, context, true, false, cb);
    }

    public Ice.AsyncResult begin_deleteProduct(String name, Callback_serverBill_deleteProduct cb)
    {
        return _iceI_begin_deleteProduct(name, null, false, false, cb);
    }

    public Ice.AsyncResult begin_deleteProduct(String name, java.util.Map<String, String> context, Callback_serverBill_deleteProduct cb)
    {
        return _iceI_begin_deleteProduct(name, context, true, false, cb);
    }

    public Ice.AsyncResult begin_deleteProduct(String name,
                                               IceInternal.Functional_BoolCallback responseCb,
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_deleteProduct(name, null, false, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_deleteProduct(String name,
                                               IceInternal.Functional_BoolCallback responseCb,
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                               IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_deleteProduct(name, null, false, false, responseCb, exceptionCb, sentCb);
    }

    public Ice.AsyncResult begin_deleteProduct(String name,
                                               java.util.Map<String, String> context,
                                               IceInternal.Functional_BoolCallback responseCb,
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_deleteProduct(name, context, true, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_deleteProduct(String name,
                                               java.util.Map<String, String> context,
                                               IceInternal.Functional_BoolCallback responseCb,
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                               IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_deleteProduct(name, context, true, false, responseCb, exceptionCb, sentCb);
    }

    private Ice.AsyncResult _iceI_begin_deleteProduct(String iceP_name,
                                                      java.util.Map<String, String> context,
                                                      boolean explicitCtx,
                                                      boolean synchronous,
                                                      IceInternal.Functional_BoolCallback responseCb,
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                                      IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_deleteProduct(iceP_name,
                                         context,
                                         explicitCtx,
                                         synchronous,
                                         new IceInternal.Functional_TwowayCallbackBool(responseCb, exceptionCb, sentCb)
                                             {
                                                 public final void _iceCompleted(Ice.AsyncResult result)
                                                 {
                                                     serverBillPrxHelper._iceI_deleteProduct_completed(this, result);
                                                 }
                                             });
    }

    private Ice.AsyncResult _iceI_begin_deleteProduct(String iceP_name,
                                                      java.util.Map<String, String> context,
                                                      boolean explicitCtx,
                                                      boolean synchronous,
                                                      IceInternal.CallbackBase cb)
    {
        _checkAsyncTwowayOnly(_deleteProduct_name);
        IceInternal.OutgoingAsync result = getOutgoingAsync(_deleteProduct_name, cb);
        try
        {
            result.prepare(_deleteProduct_name, Ice.OperationMode.Normal, context, explicitCtx, synchronous);
            Ice.OutputStream ostr = result.startWriteParams(Ice.FormatType.DefaultFormat);
            ostr.writeString(iceP_name);
            result.endWriteParams();
            result.invoke();
        }
        catch(Ice.Exception ex)
        {
            result.abort(ex);
        }
        return result;
    }

    public boolean end_deleteProduct(Ice.AsyncResult iresult)
    {
        IceInternal.OutgoingAsync result_ = IceInternal.OutgoingAsync.check(iresult, this, _deleteProduct_name);
        try
        {
            if(!result_.waitForResponseOrUserEx())
            {
                try
                {
                    result_.throwUserException();
                }
                catch(Ice.UserException ex_)
                {
                    throw new Ice.UnknownUserException(ex_.ice_id(), ex_);
                }
            }
            Ice.InputStream istr_ = result_.startReadParams();
            boolean ret_;
            ret_ = istr_.readBool();
            result_.endReadParams();
            return ret_;
        }
        finally
        {
            if(result_ != null)
            {
                result_.cacheMessageBuffers();
            }
        }
    }

    static public void _iceI_deleteProduct_completed(Ice.TwowayCallbackBool cb, Ice.AsyncResult result)
    {
        InvoiceAccounts.serverBillPrx _proxy = (InvoiceAccounts.serverBillPrx)result.getProxy();
        boolean ret = false;
        try
        {
            ret = _proxy.end_deleteProduct(result);
        }
        catch(Ice.LocalException ex)
        {
            cb.exception(ex);
            return;
        }
        catch(Ice.SystemException ex)
        {
            cb.exception(ex);
            return;
        }
        cb.response(ret);
    }

    private static final String _makeBill_name = "makeBill";

    public double makeBill(Ice.StringHolder billProducts)
    {
        return _iceI_makeBill(billProducts, null, false);
    }

    public double makeBill(Ice.StringHolder billProducts, java.util.Map<String, String> context)
    {
        return _iceI_makeBill(billProducts, context, true);
    }

    private double _iceI_makeBill(Ice.StringHolder iceP_billProducts, java.util.Map<String, String> context, boolean explicitCtx)
    {
        _checkTwowayOnly(_makeBill_name);
        return end_makeBill(iceP_billProducts, _iceI_begin_makeBill(context, explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_makeBill()
    {
        return _iceI_begin_makeBill(null, false, false, null);
    }

    public Ice.AsyncResult begin_makeBill(java.util.Map<String, String> context)
    {
        return _iceI_begin_makeBill(context, true, false, null);
    }

    public Ice.AsyncResult begin_makeBill(Ice.Callback cb)
    {
        return _iceI_begin_makeBill(null, false, false, cb);
    }

    public Ice.AsyncResult begin_makeBill(java.util.Map<String, String> context, Ice.Callback cb)
    {
        return _iceI_begin_makeBill(context, true, false, cb);
    }

    public Ice.AsyncResult begin_makeBill(Callback_serverBill_makeBill cb)
    {
        return _iceI_begin_makeBill(null, false, false, cb);
    }

    public Ice.AsyncResult begin_makeBill(java.util.Map<String, String> context, Callback_serverBill_makeBill cb)
    {
        return _iceI_begin_makeBill(context, true, false, cb);
    }

    public Ice.AsyncResult begin_makeBill(FunctionalCallback_serverBill_makeBill_Response responseCb,
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_makeBill(null, false, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_makeBill(FunctionalCallback_serverBill_makeBill_Response responseCb,
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                          IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_makeBill(null, false, false, responseCb, exceptionCb, sentCb);
    }

    public Ice.AsyncResult begin_makeBill(java.util.Map<String, String> context,
                                          FunctionalCallback_serverBill_makeBill_Response responseCb,
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_makeBill(context, true, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_makeBill(java.util.Map<String, String> context,
                                          FunctionalCallback_serverBill_makeBill_Response responseCb,
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                          IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_makeBill(context, true, false, responseCb, exceptionCb, sentCb);
    }

    private Ice.AsyncResult _iceI_begin_makeBill(java.util.Map<String, String> context,
                                                 boolean explicitCtx,
                                                 boolean synchronous,
                                                 FunctionalCallback_serverBill_makeBill_Response responseCb,
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                                 IceInternal.Functional_BoolCallback sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements InvoiceAccounts._Callback_serverBill_makeBill
        {
            public CB(FunctionalCallback_serverBill_makeBill_Response responseCb,
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                _responseCb = responseCb;
            }

            public void response(double ret, String billProducts)
            {
                if(_responseCb != null)
                {
                    _responseCb.apply(ret, billProducts);
                }
            }

            public final void _iceCompleted(Ice.AsyncResult result)
            {
                serverBillPrxHelper._iceI_makeBill_completed(this, result);
            }

            private final FunctionalCallback_serverBill_makeBill_Response _responseCb;
        }
        return _iceI_begin_makeBill(context, explicitCtx, synchronous, new CB(responseCb, exceptionCb, sentCb));
    }

    private Ice.AsyncResult _iceI_begin_makeBill(java.util.Map<String, String> context,
                                                 boolean explicitCtx,
                                                 boolean synchronous,
                                                 IceInternal.CallbackBase cb)
    {
        _checkAsyncTwowayOnly(_makeBill_name);
        IceInternal.OutgoingAsync result = getOutgoingAsync(_makeBill_name, cb);
        try
        {
            result.prepare(_makeBill_name, Ice.OperationMode.Normal, context, explicitCtx, synchronous);
            result.writeEmptyParams();
            result.invoke();
        }
        catch(Ice.Exception ex)
        {
            result.abort(ex);
        }
        return result;
    }

    public double end_makeBill(Ice.StringHolder billProducts, Ice.AsyncResult iresult)
    {
        IceInternal.OutgoingAsync result_ = IceInternal.OutgoingAsync.check(iresult, this, _makeBill_name);
        try
        {
            if(!result_.waitForResponseOrUserEx())
            {
                try
                {
                    result_.throwUserException();
                }
                catch(Ice.UserException ex_)
                {
                    throw new Ice.UnknownUserException(ex_.ice_id(), ex_);
                }
            }
            Ice.InputStream istr_ = result_.startReadParams();
            billProducts.value = istr_.readString();
            double ret_;
            ret_ = istr_.readDouble();
            result_.endReadParams();
            return ret_;
        }
        finally
        {
            if(result_ != null)
            {
                result_.cacheMessageBuffers();
            }
        }
    }

    static public void _iceI_makeBill_completed(_Callback_serverBill_makeBill cb, Ice.AsyncResult result)
    {
        InvoiceAccounts.serverBillPrx _proxy = (InvoiceAccounts.serverBillPrx)result.getProxy();
        double ret = 0.0;
        Ice.StringHolder iceP_billProducts = new Ice.StringHolder();
        try
        {
            ret = _proxy.end_makeBill(iceP_billProducts, result);
        }
        catch(Ice.LocalException ex)
        {
            cb.exception(ex);
            return;
        }
        catch(Ice.SystemException ex)
        {
            cb.exception(ex);
            return;
        }
        cb.response(ret, iceP_billProducts.value);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static serverBillPrx checkedCast(Ice.ObjectPrx obj)
    {
        return checkedCastImpl(obj, ice_staticId(), serverBillPrx.class, serverBillPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static serverBillPrx checkedCast(Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return checkedCastImpl(obj, context, ice_staticId(), serverBillPrx.class, serverBillPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static serverBillPrx checkedCast(Ice.ObjectPrx obj, String facet)
    {
        return checkedCastImpl(obj, facet, ice_staticId(), serverBillPrx.class, serverBillPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static serverBillPrx checkedCast(Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return checkedCastImpl(obj, facet, context, ice_staticId(), serverBillPrx.class, serverBillPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static serverBillPrx uncheckedCast(Ice.ObjectPrx obj)
    {
        return uncheckedCastImpl(obj, serverBillPrx.class, serverBillPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static serverBillPrx uncheckedCast(Ice.ObjectPrx obj, String facet)
    {
        return uncheckedCastImpl(obj, facet, serverBillPrx.class, serverBillPrxHelper.class);
    }

    private static final String[] _ids =
    {
        "::Ice::Object",
        "::InvoiceAccounts::serverBill"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return _ids[1];
    }

    public static void write(Ice.OutputStream ostr, serverBillPrx v)
    {
        ostr.writeProxy(v);
    }

    public static serverBillPrx read(Ice.InputStream istr)
    {
        Ice.ObjectPrx proxy = istr.readProxy();
        if(proxy != null)
        {
            serverBillPrxHelper result = new serverBillPrxHelper();
            result._copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
