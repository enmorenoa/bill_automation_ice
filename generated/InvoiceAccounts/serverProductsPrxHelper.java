//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.8
//
// <auto-generated>
//
// Generated from file `echaCuentasV2.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package InvoiceAccounts;

/**
 * Provides type-specific helper functions.
 **/
public final class serverProductsPrxHelper extends Ice.ObjectPrxHelperBase implements serverProductsPrx
{
    private static final String _requestProduct_name = "requestProduct";

    public String requestProduct(Product pc)
    {
        return _iceI_requestProduct(pc, null, false);
    }

    public String requestProduct(Product pc, java.util.Map<String, String> context)
    {
        return _iceI_requestProduct(pc, context, true);
    }

    private String _iceI_requestProduct(Product iceP_pc, java.util.Map<String, String> context, boolean explicitCtx)
    {
        _checkTwowayOnly(_requestProduct_name);
        return end_requestProduct(_iceI_begin_requestProduct(iceP_pc, context, explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_requestProduct(Product pc)
    {
        return _iceI_begin_requestProduct(pc, null, false, false, null);
    }

    public Ice.AsyncResult begin_requestProduct(Product pc, java.util.Map<String, String> context)
    {
        return _iceI_begin_requestProduct(pc, context, true, false, null);
    }

    public Ice.AsyncResult begin_requestProduct(Product pc, Ice.Callback cb)
    {
        return _iceI_begin_requestProduct(pc, null, false, false, cb);
    }

    public Ice.AsyncResult begin_requestProduct(Product pc, java.util.Map<String, String> context, Ice.Callback cb)
    {
        return _iceI_begin_requestProduct(pc, context, true, false, cb);
    }

    public Ice.AsyncResult begin_requestProduct(Product pc, Callback_serverProducts_requestProduct cb)
    {
        return _iceI_begin_requestProduct(pc, null, false, false, cb);
    }

    public Ice.AsyncResult begin_requestProduct(Product pc, java.util.Map<String, String> context, Callback_serverProducts_requestProduct cb)
    {
        return _iceI_begin_requestProduct(pc, context, true, false, cb);
    }

    public Ice.AsyncResult begin_requestProduct(Product pc,
                                                IceInternal.Functional_GenericCallback1<String> responseCb,
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_requestProduct(pc, null, false, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_requestProduct(Product pc,
                                                IceInternal.Functional_GenericCallback1<String> responseCb,
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                                IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_requestProduct(pc, null, false, false, responseCb, exceptionCb, sentCb);
    }

    public Ice.AsyncResult begin_requestProduct(Product pc,
                                                java.util.Map<String, String> context,
                                                IceInternal.Functional_GenericCallback1<String> responseCb,
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_requestProduct(pc, context, true, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_requestProduct(Product pc,
                                                java.util.Map<String, String> context,
                                                IceInternal.Functional_GenericCallback1<String> responseCb,
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                                IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_requestProduct(pc, context, true, false, responseCb, exceptionCb, sentCb);
    }

    private Ice.AsyncResult _iceI_begin_requestProduct(Product iceP_pc,
                                                       java.util.Map<String, String> context,
                                                       boolean explicitCtx,
                                                       boolean synchronous,
                                                       IceInternal.Functional_GenericCallback1<String> responseCb,
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                                       IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_requestProduct(iceP_pc,
                                          context,
                                          explicitCtx,
                                          synchronous,
                                          new IceInternal.Functional_TwowayCallbackArg1<String>(responseCb, exceptionCb, sentCb)
                                              {
                                                  public final void _iceCompleted(Ice.AsyncResult result)
                                                  {
                                                      serverProductsPrxHelper._iceI_requestProduct_completed(this, result);
                                                  }
                                              });
    }

    private Ice.AsyncResult _iceI_begin_requestProduct(Product iceP_pc,
                                                       java.util.Map<String, String> context,
                                                       boolean explicitCtx,
                                                       boolean synchronous,
                                                       IceInternal.CallbackBase cb)
    {
        _checkAsyncTwowayOnly(_requestProduct_name);
        IceInternal.OutgoingAsync result = getOutgoingAsync(_requestProduct_name, cb);
        try
        {
            result.prepare(_requestProduct_name, Ice.OperationMode.Normal, context, explicitCtx, synchronous);
            Ice.OutputStream ostr = result.startWriteParams(Ice.FormatType.DefaultFormat);
            Product.ice_write(ostr, iceP_pc);
            result.endWriteParams();
            result.invoke();
        }
        catch(Ice.Exception ex)
        {
            result.abort(ex);
        }
        return result;
    }

    public String end_requestProduct(Ice.AsyncResult iresult)
    {
        IceInternal.OutgoingAsync result_ = IceInternal.OutgoingAsync.check(iresult, this, _requestProduct_name);
        try
        {
            if(!result_.waitForResponseOrUserEx())
            {
                try
                {
                    result_.throwUserException();
                }
                catch(Ice.UserException ex_)
                {
                    throw new Ice.UnknownUserException(ex_.ice_id(), ex_);
                }
            }
            Ice.InputStream istr_ = result_.startReadParams();
            String ret_;
            ret_ = istr_.readString();
            result_.endReadParams();
            return ret_;
        }
        finally
        {
            if(result_ != null)
            {
                result_.cacheMessageBuffers();
            }
        }
    }

    static public void _iceI_requestProduct_completed(Ice.TwowayCallbackArg1<String> cb, Ice.AsyncResult result)
    {
        InvoiceAccounts.serverProductsPrx _proxy = (InvoiceAccounts.serverProductsPrx)result.getProxy();
        String ret = null;
        try
        {
            ret = _proxy.end_requestProduct(result);
        }
        catch(Ice.LocalException ex)
        {
            cb.exception(ex);
            return;
        }
        catch(Ice.SystemException ex)
        {
            cb.exception(ex);
            return;
        }
        cb.response(ret);
    }

    private static final String _requestMenu_name = "requestMenu";

    public void requestMenu(Ice.StringHolder menu)
    {
        _iceI_requestMenu(menu, null, false);
    }

    public void requestMenu(Ice.StringHolder menu, java.util.Map<String, String> context)
    {
        _iceI_requestMenu(menu, context, true);
    }

    private void _iceI_requestMenu(Ice.StringHolder iceP_menu, java.util.Map<String, String> context, boolean explicitCtx)
    {
        _checkTwowayOnly(_requestMenu_name);
        end_requestMenu(iceP_menu, _iceI_begin_requestMenu(context, explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_requestMenu()
    {
        return _iceI_begin_requestMenu(null, false, false, null);
    }

    public Ice.AsyncResult begin_requestMenu(java.util.Map<String, String> context)
    {
        return _iceI_begin_requestMenu(context, true, false, null);
    }

    public Ice.AsyncResult begin_requestMenu(Ice.Callback cb)
    {
        return _iceI_begin_requestMenu(null, false, false, cb);
    }

    public Ice.AsyncResult begin_requestMenu(java.util.Map<String, String> context, Ice.Callback cb)
    {
        return _iceI_begin_requestMenu(context, true, false, cb);
    }

    public Ice.AsyncResult begin_requestMenu(Callback_serverProducts_requestMenu cb)
    {
        return _iceI_begin_requestMenu(null, false, false, cb);
    }

    public Ice.AsyncResult begin_requestMenu(java.util.Map<String, String> context, Callback_serverProducts_requestMenu cb)
    {
        return _iceI_begin_requestMenu(context, true, false, cb);
    }

    public Ice.AsyncResult begin_requestMenu(IceInternal.Functional_GenericCallback1<String> responseCb,
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_requestMenu(null, false, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_requestMenu(IceInternal.Functional_GenericCallback1<String> responseCb,
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                             IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_requestMenu(null, false, false, responseCb, exceptionCb, sentCb);
    }

    public Ice.AsyncResult begin_requestMenu(java.util.Map<String, String> context,
                                             IceInternal.Functional_GenericCallback1<String> responseCb,
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_requestMenu(context, true, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_requestMenu(java.util.Map<String, String> context,
                                             IceInternal.Functional_GenericCallback1<String> responseCb,
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                             IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_requestMenu(context, true, false, responseCb, exceptionCb, sentCb);
    }

    private Ice.AsyncResult _iceI_begin_requestMenu(java.util.Map<String, String> context,
                                                    boolean explicitCtx,
                                                    boolean synchronous,
                                                    IceInternal.Functional_GenericCallback1<String> responseCb,
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                                    IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_requestMenu(context,
                                       explicitCtx,
                                       synchronous,
                                       new IceInternal.Functional_TwowayCallbackArg1<String>(responseCb, exceptionCb, sentCb)
                                           {
                                               public final void _iceCompleted(Ice.AsyncResult result)
                                               {
                                                   serverProductsPrxHelper._iceI_requestMenu_completed(this, result);
                                               }
                                           });
    }

    private Ice.AsyncResult _iceI_begin_requestMenu(java.util.Map<String, String> context,
                                                    boolean explicitCtx,
                                                    boolean synchronous,
                                                    IceInternal.CallbackBase cb)
    {
        _checkAsyncTwowayOnly(_requestMenu_name);
        IceInternal.OutgoingAsync result = getOutgoingAsync(_requestMenu_name, cb);
        try
        {
            result.prepare(_requestMenu_name, Ice.OperationMode.Normal, context, explicitCtx, synchronous);
            result.writeEmptyParams();
            result.invoke();
        }
        catch(Ice.Exception ex)
        {
            result.abort(ex);
        }
        return result;
    }

    public void end_requestMenu(Ice.StringHolder menu, Ice.AsyncResult iresult)
    {
        IceInternal.OutgoingAsync result_ = IceInternal.OutgoingAsync.check(iresult, this, _requestMenu_name);
        try
        {
            if(!result_.waitForResponseOrUserEx())
            {
                try
                {
                    result_.throwUserException();
                }
                catch(Ice.UserException ex_)
                {
                    throw new Ice.UnknownUserException(ex_.ice_id(), ex_);
                }
            }
            Ice.InputStream istr_ = result_.startReadParams();
            menu.value = istr_.readString();
            result_.endReadParams();
        }
        finally
        {
            if(result_ != null)
            {
                result_.cacheMessageBuffers();
            }
        }
    }

    static public void _iceI_requestMenu_completed(Ice.TwowayCallbackArg1<String> cb, Ice.AsyncResult result)
    {
        InvoiceAccounts.serverProductsPrx _proxy = (InvoiceAccounts.serverProductsPrx)result.getProxy();
        Ice.StringHolder iceP_menu = new Ice.StringHolder();
        try
        {
            _proxy.end_requestMenu(iceP_menu, result);
        }
        catch(Ice.LocalException ex)
        {
            cb.exception(ex);
            return;
        }
        catch(Ice.SystemException ex)
        {
            cb.exception(ex);
            return;
        }
        cb.response(iceP_menu.value);
    }

    private static final String _requestSuggestion_name = "requestSuggestion";

    public String requestSuggestion()
    {
        return _iceI_requestSuggestion(null, false);
    }

    public String requestSuggestion(java.util.Map<String, String> context)
    {
        return _iceI_requestSuggestion(context, true);
    }

    private String _iceI_requestSuggestion(java.util.Map<String, String> context, boolean explicitCtx)
    {
        _checkTwowayOnly(_requestSuggestion_name);
        return end_requestSuggestion(_iceI_begin_requestSuggestion(context, explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_requestSuggestion()
    {
        return _iceI_begin_requestSuggestion(null, false, false, null);
    }

    public Ice.AsyncResult begin_requestSuggestion(java.util.Map<String, String> context)
    {
        return _iceI_begin_requestSuggestion(context, true, false, null);
    }

    public Ice.AsyncResult begin_requestSuggestion(Ice.Callback cb)
    {
        return _iceI_begin_requestSuggestion(null, false, false, cb);
    }

    public Ice.AsyncResult begin_requestSuggestion(java.util.Map<String, String> context, Ice.Callback cb)
    {
        return _iceI_begin_requestSuggestion(context, true, false, cb);
    }

    public Ice.AsyncResult begin_requestSuggestion(Callback_serverProducts_requestSuggestion cb)
    {
        return _iceI_begin_requestSuggestion(null, false, false, cb);
    }

    public Ice.AsyncResult begin_requestSuggestion(java.util.Map<String, String> context, Callback_serverProducts_requestSuggestion cb)
    {
        return _iceI_begin_requestSuggestion(context, true, false, cb);
    }

    public Ice.AsyncResult begin_requestSuggestion(IceInternal.Functional_GenericCallback1<String> responseCb,
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_requestSuggestion(null, false, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_requestSuggestion(IceInternal.Functional_GenericCallback1<String> responseCb,
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                                   IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_requestSuggestion(null, false, false, responseCb, exceptionCb, sentCb);
    }

    public Ice.AsyncResult begin_requestSuggestion(java.util.Map<String, String> context,
                                                   IceInternal.Functional_GenericCallback1<String> responseCb,
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_requestSuggestion(context, true, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_requestSuggestion(java.util.Map<String, String> context,
                                                   IceInternal.Functional_GenericCallback1<String> responseCb,
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                                   IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_requestSuggestion(context, true, false, responseCb, exceptionCb, sentCb);
    }

    private Ice.AsyncResult _iceI_begin_requestSuggestion(java.util.Map<String, String> context,
                                                          boolean explicitCtx,
                                                          boolean synchronous,
                                                          IceInternal.Functional_GenericCallback1<String> responseCb,
                                                          IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                                          IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_requestSuggestion(context,
                                             explicitCtx,
                                             synchronous,
                                             new IceInternal.Functional_TwowayCallbackArg1<String>(responseCb, exceptionCb, sentCb)
                                                 {
                                                     public final void _iceCompleted(Ice.AsyncResult result)
                                                     {
                                                         serverProductsPrxHelper._iceI_requestSuggestion_completed(this, result);
                                                     }
                                                 });
    }

    private Ice.AsyncResult _iceI_begin_requestSuggestion(java.util.Map<String, String> context,
                                                          boolean explicitCtx,
                                                          boolean synchronous,
                                                          IceInternal.CallbackBase cb)
    {
        _checkAsyncTwowayOnly(_requestSuggestion_name);
        IceInternal.OutgoingAsync result = getOutgoingAsync(_requestSuggestion_name, cb);
        try
        {
            result.prepare(_requestSuggestion_name, Ice.OperationMode.Normal, context, explicitCtx, synchronous);
            result.writeEmptyParams();
            result.invoke();
        }
        catch(Ice.Exception ex)
        {
            result.abort(ex);
        }
        return result;
    }

    public String end_requestSuggestion(Ice.AsyncResult iresult)
    {
        IceInternal.OutgoingAsync result_ = IceInternal.OutgoingAsync.check(iresult, this, _requestSuggestion_name);
        try
        {
            if(!result_.waitForResponseOrUserEx())
            {
                try
                {
                    result_.throwUserException();
                }
                catch(Ice.UserException ex_)
                {
                    throw new Ice.UnknownUserException(ex_.ice_id(), ex_);
                }
            }
            Ice.InputStream istr_ = result_.startReadParams();
            String ret_;
            ret_ = istr_.readString();
            result_.endReadParams();
            return ret_;
        }
        finally
        {
            if(result_ != null)
            {
                result_.cacheMessageBuffers();
            }
        }
    }

    static public void _iceI_requestSuggestion_completed(Ice.TwowayCallbackArg1<String> cb, Ice.AsyncResult result)
    {
        InvoiceAccounts.serverProductsPrx _proxy = (InvoiceAccounts.serverProductsPrx)result.getProxy();
        String ret = null;
        try
        {
            ret = _proxy.end_requestSuggestion(result);
        }
        catch(Ice.LocalException ex)
        {
            cb.exception(ex);
            return;
        }
        catch(Ice.SystemException ex)
        {
            cb.exception(ex);
            return;
        }
        cb.response(ret);
    }

    private static final String _getNumProducts_name = "getNumProducts";

    public int getNumProducts()
    {
        return _iceI_getNumProducts(null, false);
    }

    public int getNumProducts(java.util.Map<String, String> context)
    {
        return _iceI_getNumProducts(context, true);
    }

    private int _iceI_getNumProducts(java.util.Map<String, String> context, boolean explicitCtx)
    {
        _checkTwowayOnly(_getNumProducts_name);
        return end_getNumProducts(_iceI_begin_getNumProducts(context, explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getNumProducts()
    {
        return _iceI_begin_getNumProducts(null, false, false, null);
    }

    public Ice.AsyncResult begin_getNumProducts(java.util.Map<String, String> context)
    {
        return _iceI_begin_getNumProducts(context, true, false, null);
    }

    public Ice.AsyncResult begin_getNumProducts(Ice.Callback cb)
    {
        return _iceI_begin_getNumProducts(null, false, false, cb);
    }

    public Ice.AsyncResult begin_getNumProducts(java.util.Map<String, String> context, Ice.Callback cb)
    {
        return _iceI_begin_getNumProducts(context, true, false, cb);
    }

    public Ice.AsyncResult begin_getNumProducts(Callback_serverProducts_getNumProducts cb)
    {
        return _iceI_begin_getNumProducts(null, false, false, cb);
    }

    public Ice.AsyncResult begin_getNumProducts(java.util.Map<String, String> context, Callback_serverProducts_getNumProducts cb)
    {
        return _iceI_begin_getNumProducts(context, true, false, cb);
    }

    public Ice.AsyncResult begin_getNumProducts(IceInternal.Functional_IntCallback responseCb,
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_getNumProducts(null, false, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_getNumProducts(IceInternal.Functional_IntCallback responseCb,
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                                IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_getNumProducts(null, false, false, responseCb, exceptionCb, sentCb);
    }

    public Ice.AsyncResult begin_getNumProducts(java.util.Map<String, String> context,
                                                IceInternal.Functional_IntCallback responseCb,
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_getNumProducts(context, true, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_getNumProducts(java.util.Map<String, String> context,
                                                IceInternal.Functional_IntCallback responseCb,
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                                IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_getNumProducts(context, true, false, responseCb, exceptionCb, sentCb);
    }

    private Ice.AsyncResult _iceI_begin_getNumProducts(java.util.Map<String, String> context,
                                                       boolean explicitCtx,
                                                       boolean synchronous,
                                                       IceInternal.Functional_IntCallback responseCb,
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                                       IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_getNumProducts(context,
                                          explicitCtx,
                                          synchronous,
                                          new IceInternal.Functional_TwowayCallbackInt(responseCb, exceptionCb, sentCb)
                                              {
                                                  public final void _iceCompleted(Ice.AsyncResult result)
                                                  {
                                                      serverProductsPrxHelper._iceI_getNumProducts_completed(this, result);
                                                  }
                                              });
    }

    private Ice.AsyncResult _iceI_begin_getNumProducts(java.util.Map<String, String> context,
                                                       boolean explicitCtx,
                                                       boolean synchronous,
                                                       IceInternal.CallbackBase cb)
    {
        _checkAsyncTwowayOnly(_getNumProducts_name);
        IceInternal.OutgoingAsync result = getOutgoingAsync(_getNumProducts_name, cb);
        try
        {
            result.prepare(_getNumProducts_name, Ice.OperationMode.Normal, context, explicitCtx, synchronous);
            result.writeEmptyParams();
            result.invoke();
        }
        catch(Ice.Exception ex)
        {
            result.abort(ex);
        }
        return result;
    }

    public int end_getNumProducts(Ice.AsyncResult iresult)
    {
        IceInternal.OutgoingAsync result_ = IceInternal.OutgoingAsync.check(iresult, this, _getNumProducts_name);
        try
        {
            if(!result_.waitForResponseOrUserEx())
            {
                try
                {
                    result_.throwUserException();
                }
                catch(Ice.UserException ex_)
                {
                    throw new Ice.UnknownUserException(ex_.ice_id(), ex_);
                }
            }
            Ice.InputStream istr_ = result_.startReadParams();
            int ret_;
            ret_ = istr_.readInt();
            result_.endReadParams();
            return ret_;
        }
        finally
        {
            if(result_ != null)
            {
                result_.cacheMessageBuffers();
            }
        }
    }

    static public void _iceI_getNumProducts_completed(Ice.TwowayCallbackInt cb, Ice.AsyncResult result)
    {
        InvoiceAccounts.serverProductsPrx _proxy = (InvoiceAccounts.serverProductsPrx)result.getProxy();
        int ret = 0;
        try
        {
            ret = _proxy.end_getNumProducts(result);
        }
        catch(Ice.LocalException ex)
        {
            cb.exception(ex);
            return;
        }
        catch(Ice.SystemException ex)
        {
            cb.exception(ex);
            return;
        }
        cb.response(ret);
    }

    private static final String _getProduct_name = "getProduct";

    public Product getProduct(int num)
    {
        return _iceI_getProduct(num, null, false);
    }

    public Product getProduct(int num, java.util.Map<String, String> context)
    {
        return _iceI_getProduct(num, context, true);
    }

    private Product _iceI_getProduct(int iceP_num, java.util.Map<String, String> context, boolean explicitCtx)
    {
        _checkTwowayOnly(_getProduct_name);
        return end_getProduct(_iceI_begin_getProduct(iceP_num, context, explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getProduct(int num)
    {
        return _iceI_begin_getProduct(num, null, false, false, null);
    }

    public Ice.AsyncResult begin_getProduct(int num, java.util.Map<String, String> context)
    {
        return _iceI_begin_getProduct(num, context, true, false, null);
    }

    public Ice.AsyncResult begin_getProduct(int num, Ice.Callback cb)
    {
        return _iceI_begin_getProduct(num, null, false, false, cb);
    }

    public Ice.AsyncResult begin_getProduct(int num, java.util.Map<String, String> context, Ice.Callback cb)
    {
        return _iceI_begin_getProduct(num, context, true, false, cb);
    }

    public Ice.AsyncResult begin_getProduct(int num, Callback_serverProducts_getProduct cb)
    {
        return _iceI_begin_getProduct(num, null, false, false, cb);
    }

    public Ice.AsyncResult begin_getProduct(int num, java.util.Map<String, String> context, Callback_serverProducts_getProduct cb)
    {
        return _iceI_begin_getProduct(num, context, true, false, cb);
    }

    public Ice.AsyncResult begin_getProduct(int num,
                                            IceInternal.Functional_GenericCallback1<Product> responseCb,
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_getProduct(num, null, false, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_getProduct(int num,
                                            IceInternal.Functional_GenericCallback1<Product> responseCb,
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                            IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_getProduct(num, null, false, false, responseCb, exceptionCb, sentCb);
    }

    public Ice.AsyncResult begin_getProduct(int num,
                                            java.util.Map<String, String> context,
                                            IceInternal.Functional_GenericCallback1<Product> responseCb,
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_getProduct(num, context, true, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_getProduct(int num,
                                            java.util.Map<String, String> context,
                                            IceInternal.Functional_GenericCallback1<Product> responseCb,
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                            IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_getProduct(num, context, true, false, responseCb, exceptionCb, sentCb);
    }

    private Ice.AsyncResult _iceI_begin_getProduct(int iceP_num,
                                                   java.util.Map<String, String> context,
                                                   boolean explicitCtx,
                                                   boolean synchronous,
                                                   IceInternal.Functional_GenericCallback1<Product> responseCb,
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                                   IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_getProduct(iceP_num,
                                      context,
                                      explicitCtx,
                                      synchronous,
                                      new IceInternal.Functional_TwowayCallbackArg1<InvoiceAccounts.Product>(responseCb, exceptionCb, sentCb)
                                          {
                                              public final void _iceCompleted(Ice.AsyncResult result)
                                              {
                                                  serverProductsPrxHelper._iceI_getProduct_completed(this, result);
                                              }
                                          });
    }

    private Ice.AsyncResult _iceI_begin_getProduct(int iceP_num,
                                                   java.util.Map<String, String> context,
                                                   boolean explicitCtx,
                                                   boolean synchronous,
                                                   IceInternal.CallbackBase cb)
    {
        _checkAsyncTwowayOnly(_getProduct_name);
        IceInternal.OutgoingAsync result = getOutgoingAsync(_getProduct_name, cb);
        try
        {
            result.prepare(_getProduct_name, Ice.OperationMode.Normal, context, explicitCtx, synchronous);
            Ice.OutputStream ostr = result.startWriteParams(Ice.FormatType.DefaultFormat);
            ostr.writeInt(iceP_num);
            result.endWriteParams();
            result.invoke();
        }
        catch(Ice.Exception ex)
        {
            result.abort(ex);
        }
        return result;
    }

    public Product end_getProduct(Ice.AsyncResult iresult)
    {
        IceInternal.OutgoingAsync result_ = IceInternal.OutgoingAsync.check(iresult, this, _getProduct_name);
        try
        {
            if(!result_.waitForResponseOrUserEx())
            {
                try
                {
                    result_.throwUserException();
                }
                catch(Ice.UserException ex_)
                {
                    throw new Ice.UnknownUserException(ex_.ice_id(), ex_);
                }
            }
            Ice.InputStream istr_ = result_.startReadParams();
            Product ret_ = null;
            ret_ = Product.ice_read(istr_);
            result_.endReadParams();
            return ret_;
        }
        finally
        {
            if(result_ != null)
            {
                result_.cacheMessageBuffers();
            }
        }
    }

    static public void _iceI_getProduct_completed(Ice.TwowayCallbackArg1<Product> cb, Ice.AsyncResult result)
    {
        InvoiceAccounts.serverProductsPrx _proxy = (InvoiceAccounts.serverProductsPrx)result.getProxy();
        Product ret = null;
        try
        {
            ret = _proxy.end_getProduct(result);
        }
        catch(Ice.LocalException ex)
        {
            cb.exception(ex);
            return;
        }
        catch(Ice.SystemException ex)
        {
            cb.exception(ex);
            return;
        }
        cb.response(ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static serverProductsPrx checkedCast(Ice.ObjectPrx obj)
    {
        return checkedCastImpl(obj, ice_staticId(), serverProductsPrx.class, serverProductsPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static serverProductsPrx checkedCast(Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return checkedCastImpl(obj, context, ice_staticId(), serverProductsPrx.class, serverProductsPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static serverProductsPrx checkedCast(Ice.ObjectPrx obj, String facet)
    {
        return checkedCastImpl(obj, facet, ice_staticId(), serverProductsPrx.class, serverProductsPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static serverProductsPrx checkedCast(Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return checkedCastImpl(obj, facet, context, ice_staticId(), serverProductsPrx.class, serverProductsPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static serverProductsPrx uncheckedCast(Ice.ObjectPrx obj)
    {
        return uncheckedCastImpl(obj, serverProductsPrx.class, serverProductsPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static serverProductsPrx uncheckedCast(Ice.ObjectPrx obj, String facet)
    {
        return uncheckedCastImpl(obj, facet, serverProductsPrx.class, serverProductsPrxHelper.class);
    }

    private static final String[] _ids =
    {
        "::Ice::Object",
        "::InvoiceAccounts::serverProducts"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return _ids[1];
    }

    public static void write(Ice.OutputStream ostr, serverProductsPrx v)
    {
        ostr.writeProxy(v);
    }

    public static serverProductsPrx read(Ice.InputStream istr)
    {
        Ice.ObjectPrx proxy = istr.readProxy();
        if(proxy != null)
        {
            serverProductsPrxHelper result = new serverProductsPrxHelper();
            result._copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
