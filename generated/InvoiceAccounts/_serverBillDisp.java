//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.8
//
// <auto-generated>
//
// Generated from file `echaCuentasV2.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package InvoiceAccounts;

public abstract class _serverBillDisp extends Ice.ObjectImpl implements serverBill
{
    private static final String[] _ids =
    {
        "::Ice::Object",
        "::InvoiceAccounts::serverBill"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(_ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current current)
    {
        return java.util.Arrays.binarySearch(_ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return _ids;
    }

    public String[] ice_ids(Ice.Current current)
    {
        return _ids;
    }

    public String ice_id()
    {
        return _ids[1];
    }

    public String ice_id(Ice.Current current)
    {
        return _ids[1];
    }

    public static String ice_staticId()
    {
        return _ids[1];
    }

    public final void addProduct(Product p)
    {
        addProduct(p, null);
    }

    public final boolean deleteProduct(String name)
    {
        return deleteProduct(name, null);
    }

    public final double makeBill(Ice.StringHolder billProducts)
    {
        return makeBill(billProducts, null);
    }

    public static boolean _iceD_addProduct(serverBill obj, IceInternal.Incoming inS, Ice.Current current)
        throws Ice.UserException
    {
        _iceCheckMode(Ice.OperationMode.Normal, current.mode);
        Ice.InputStream istr = inS.startReadParams();
        Product iceP_p = null;
        iceP_p = Product.ice_read(istr);
        inS.endReadParams();
        obj.addProduct(iceP_p, current);
        inS.writeEmptyParams();
        return true;
    }

    public static boolean _iceD_deleteProduct(serverBill obj, IceInternal.Incoming inS, Ice.Current current)
        throws Ice.UserException
    {
        _iceCheckMode(Ice.OperationMode.Normal, current.mode);
        Ice.InputStream istr = inS.startReadParams();
        String iceP_name;
        iceP_name = istr.readString();
        inS.endReadParams();
        boolean ret = obj.deleteProduct(iceP_name, current);
        Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams();
        return true;
    }

    public static boolean _iceD_makeBill(serverBill obj, IceInternal.Incoming inS, Ice.Current current)
        throws Ice.UserException
    {
        _iceCheckMode(Ice.OperationMode.Normal, current.mode);
        inS.readEmptyParams();
        Ice.StringHolder iceP_billProducts = new Ice.StringHolder();
        double ret = obj.makeBill(iceP_billProducts, current);
        Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(iceP_billProducts.value);
        ostr.writeDouble(ret);
        inS.endWriteParams();
        return true;
    }

    private final static String[] _all =
    {
        "addProduct",
        "deleteProduct",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "makeBill"
    };

    public boolean _iceDispatch(IceInternal.Incoming in, Ice.Current current)
        throws Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_all, current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_addProduct(this, in, current);
            }
            case 1:
            {
                return _iceD_deleteProduct(this, in, current);
            }
            case 2:
            {
                return _iceD_ice_id(this, in, current);
            }
            case 3:
            {
                return _iceD_ice_ids(this, in, current);
            }
            case 4:
            {
                return _iceD_ice_isA(this, in, current);
            }
            case 5:
            {
                return _iceD_ice_ping(this, in, current);
            }
            case 6:
            {
                return _iceD_makeBill(this, in, current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }

    protected void _iceWriteImpl(Ice.OutputStream ostr_)
    {
        ostr_.startSlice(ice_staticId(), -1, true);
        ostr_.endSlice();
    }

    protected void _iceReadImpl(Ice.InputStream istr_)
    {
        istr_.startSlice();
        istr_.endSlice();
    }

    public static final long serialVersionUID = 0L;
}
